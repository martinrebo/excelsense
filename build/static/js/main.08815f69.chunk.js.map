{"version":3,"sources":["components/Modal/Modal.js","store/store.js","components/GridView/GridView.js","routes/Assets.js","Hooks/useContextMenu.js","components/Menu/Menu.js","routes/Entities.js","components/HeroBanner/HeroBanner.js","App.js","serviceWorker.js","index.js"],"names":["Modal","fields","useState","toogle","setToogle","handleClick","e","className","onClick","role","map","item","index","type","name","placeholder","initialState","compact","nightmode","store","createContext","Provider","StateProvider","children","useReducer","state","action","payload","Error","dispatch","value","GridView","columns","isLoading","isError","dataSet","isLinked","globalState","useContext","minWidth","maxWidth","numberOfColumns","length","style","gridTemplateColumns","column","replace","key","data","objectKey","Object","keys","property","i","data-id","id","to","Assets","useDataApi","assets","getKeys","useContextMenu","outerRef","xPos","setXPos","yPos","setYPos","menu","showMenu","dataId","setDataId","handleContextMenu","useCallback","event","preventDefault","current","contains","target","pageX","pageY","dataset","console","log","useEffect","document","addEventListener","removeEventListener","Menu","top","left","Entities","filteredEntities","entityId","useParams","entities","filter","entitity","id_asset","parseInt","useRef","ref","HeroBanner","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2WA6CeA,G,MA1CD,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EAEEC,oBAAS,GAFX,mBAEnBC,EAFmB,KAEXC,EAFW,KAIpBC,EAAc,SAACC,GAAQF,GAAWD,IAExC,OAII,oCACKA,EAEG,yBAAKI,UAAU,SACX,4BAAQC,QAASH,GAAjB,IAA+B,0BAAMI,KAAK,OAAX,UAA/B,KACA,4CACA,8BACI,6BACKR,EAAOS,KAAI,SAACC,EAAMC,GAEf,OAAQ,2BAAOC,KAAK,OAAOC,KAAMH,EAAMI,YAAaJ,QAM5D,4BAAQJ,UAAU,gBAAgBM,KAAK,UAAvC,cAMN,qCAGN,yBAAKN,UAAU,gBACX,4BAAQC,QAASH,GAAjB,IAA+B,0BAAMI,KAAK,OAAX,iBAA/B,U,QCpCVO,EAAe,CACjBC,SAAS,EACTC,WAAW,GAETC,EAAQC,wBAAcJ,GACpBK,EAAaF,EAAbE,SAEFC,EAAgB,SAAC,GAAoB,IAAjBC,EAAgB,EAAhBA,SAAgB,EACdC,sBAAW,SAACC,EAAOC,GAC3C,OAAOA,EAAOb,MACZ,IAAK,sBACH,OAAO,2BAAIY,GAAX,IAAkBR,QAASS,EAAOC,UAClC,IAAK,mBACD,OAAO,2BAAIF,GAAX,IAAkBP,UAAWQ,EAAOC,UAC1C,QACE,MAAM,IAAIC,SAEbZ,GAVqC,mBACjCS,EADiC,KAC1BI,EAD0B,KAYxC,OAAO,kBAACR,EAAD,CAAUS,MAAO,CAAEL,QAAOI,aAAaN,ICsCjCQ,G,MAtDE,SAAC,GAAwD,IAAtDC,EAAqD,EAArDA,QAASC,EAA4C,EAA5CA,UAAWC,EAAiC,EAAjCA,QAASC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SAEhDC,EAAcC,qBAAWnB,GAG3BoB,EAAWF,EAAYZ,MAAMR,QAAU,cAAgB,QACvDuB,EAAWH,EAAYZ,MAAMR,QAAU,QAAU,MAGjDwB,EAAkBL,GAAkB,OAAPJ,QAAO,IAAPA,OAAA,EAAAA,EAASU,QAAS,EAArB,OAAyBV,QAAzB,IAAyBA,OAAzB,EAAyBA,EAASU,OAC1DC,EAAQ,CACVC,oBAAoB,UAAD,OAAYH,EAAZ,oBAAuCF,EAAvC,aAAoDC,EAApD,OAInBtB,EAAYmB,EAAYZ,MAAMP,UAAY,YAAc,UAE5D,OAEI,yBAAKX,UAAS,YAAeoC,MAAOA,GAApC,OACKX,QADL,IACKA,OADL,EACKA,EAAStB,KAAI,SAACmC,EAAQjC,GAEnB,IAAIE,EAAO+B,EAAOC,QAAQ,KAAM,KAChC,OACI,oCACI,0BAAMvC,UAAU,SAASwC,IAAKnC,GAA9B,IAAuCE,EAAvC,SAKXsB,EAAW,0BAAM7B,UAAU,UAAhB,sBAAqD,KAEhE0B,EAAY,aAAeE,EAAQzB,KAAI,SAACsC,EAAMpC,GAC3C,IAAIqC,EAAYC,OAAOC,KAAKH,GAC5B,OACI,oCACKC,EAAUvC,KAAI,SAAC0C,EAAUC,GACtB,OAAQ,0BAAM9C,UAAS,UAAKW,GAAa6B,IAAKM,EAAGC,UAAA,OAASN,QAAT,IAASA,OAAT,EAASA,EAAMO,IAAxD,IAA+DP,EAAKI,GAApE,QAGXhB,EACG,0BAAM7B,UAAS,UAAKW,IAApB,KAAmC,kBAAC,IAAD,CAAMX,UAAS,UAAKW,GAAasC,GAAE,yBAAaR,QAAb,IAAaA,OAAb,EAAaA,EAAMO,KAAtD,2BAA8EP,QAA9E,IAA8EA,OAA9E,EAA8EA,EAAMO,GAApF,MACjC,SAMjBrB,EAAU,wBAA0B,MCnBlCuB,MA9Bf,WAAkB,MAEkCC,IAC5C,cACA,CAAEC,OAAQ,KAJA,0BAELX,EAFK,EAELA,KAAMf,EAFD,EAECA,UAAWC,EAFZ,EAEYA,QAWpBF,GAbQ,KAQE,WACZ,GAAIgB,EAAKW,OAAOjB,OAAS,EACrB,OAAOQ,OAAOC,KAAKH,EAAKW,OAAO,IAGvBC,IAChB,OACI,yBAAKrD,UAAU,gBACX,yBAAKA,UAAU,eACX,kBAAC,EAAD,CACA4B,QAAWa,EAAKW,OAChB1B,UAAaA,EACbC,QAAWA,EACXF,QAAWA,EACXI,UAAY,KAGhB,kBAAC,EAAD,CAAOnC,OAAQ+B,MCYZ6B,EAxCQ,SAAAC,GAAa,IAAD,EACT5D,mBAAS,OADA,mBAC1B6D,EAD0B,KACpBC,EADoB,OAET9D,mBAAS,OAFA,mBAE1B+D,EAF0B,KAEpBC,EAFoB,OAGRhE,oBAAS,GAHD,mBAG1BiE,EAH0B,KAGpBC,EAHoB,OAILlE,oBAAS,GAJJ,mBAI1BmE,EAJ0B,KAIlBC,EAJkB,KAM3BC,EAAoBC,uBACxB,SAAAC,GAAU,IAAD,EACPA,EAAMC,iBACFZ,IAAQ,OAAIA,QAAJ,IAAIA,GAAJ,UAAIA,EAAUa,eAAd,aAAI,EAAmBC,SAASH,EAAMI,UAChDb,EAAQ,GAAD,OAAIS,EAAMK,MAAV,OACPZ,EAAQ,GAAD,OAAIO,EAAMM,MAAV,OACPX,GAAS,GACTE,EAAUG,EAAMI,OAAOG,QAAQzB,IAC/B0B,QAAQC,IAAIT,EAAMI,SAElBT,GAAS,KAGb,CAACA,EAAUN,EAAUE,EAASE,IAG1B7D,EAAcmE,uBAAY,SAAClE,GAE/B8D,GAAS,KAER,CAACA,IAWJ,OATAe,qBAAU,WAGR,OAFAC,SAASC,iBAAiB,QAAShF,GACnC+E,SAASC,iBAAiB,cAAed,GAClC,WACLa,SAASE,oBAAoB,QAASjF,GACtC+E,SAASE,oBAAoB,cAAef,MAE7C,IAEI,CAAER,OAAME,OAAME,OAAME,WClBdkB,G,MAjBF,SAAC,GAAkB,IAAhBzB,EAAe,EAAfA,SAAe,EACUD,EAAeC,GAA5CC,EADmB,EACnBA,KAAME,EADa,EACbA,KAAME,EADO,EACPA,KAAME,EADC,EACDA,OAM1B,OAAIF,EAEI,wBAAI5D,UAAU,OAAOoC,MAAO,CAAE6C,IAAKvB,EAAMwB,KAAM1B,IAC3C,wBAAIvD,QAPI,SAACF,GACjBA,EAAEoE,iBACFO,QAAQC,IAAI,wBAAyBb,KAK7B,qBAA6CA,EAA7C,OAIL,uCCqCIqB,MA9Cf,WAAoB,IAIZC,EADEC,EAAaC,cAAbD,SAHU,EAMgClC,IAC5C,gBACA,CAAEoC,SAAU,KARA,0BAMP9C,EANO,EAMPA,KAAMf,EANC,EAMDA,UAAWC,EANV,EAMUA,QANV,KAaZyD,EADa,aAAbC,EACmB5C,EAAK8C,SAGL9C,EAAK8C,SAASC,QAAO,SAAAC,GAAQ,OAAIA,EAASC,WAAaC,SAASN,MAKvF,IAKM5D,EALU,WACZ,GAAIgB,EAAK8C,SAASpD,OAAS,EACvB,OAAOQ,OAAOC,KAAKH,EAAK8C,SAAS,IAGzBlC,GAGVE,EAAWqC,iBAAO,MACxB,OACI,yBAAK5F,UAAU,gBACX,yBAAK6F,IAAKtC,GACV,kBAAC,EAAD,CAAMA,SAAUA,IACZ,kBAAC,EAAD,CACI3B,QAASwD,EACT1D,UAAWA,EACXC,QAASA,EACTF,QAASA,IAEjB,kBAAC,EAAD,CAAO/B,OAAQ+B,O,MCPZqE,MArCf,WACI,IAAMhE,EAAcC,qBAAWnB,GACvBU,EAAaQ,EAAbR,SAcR,OAZJoD,QAAQC,IAAI7C,EAAYZ,OAahB,yBAAKlB,UAAU,cACX,yBAAKA,UAAU,eACX,2DACA,kBAAC,IAAD,CAAMA,UAAU,OAAOiD,GAAG,KAA1B,YACA,kBAAC,IAAD,CAAMjD,UAAU,OAAOiD,GAAG,qBAA1B,cAED,4BAAQhD,QAlBK,SAACF,GAErBuB,EAAS,CAAChB,KAAM,sBAAuBc,SAAUU,EAAYZ,MAAMR,WAgB1BV,UAAU,eAA5C,IAA2D,8BACpD8B,EAAYZ,MAAMR,QAAU,wCAAY,gBAD/C,OAIC,4BAAQT,QAhBI,SAACF,GAErBuB,EAAS,CAAChB,KAAM,mBAAoBc,SAAUU,EAAYZ,MAAMP,aAcrBX,UAAU,eAA7C,IAA6D,8BAC3D8B,EAAYZ,MAAMP,UAAY,gBAAQ,gBADxC,QCLDoF,MAlBf,WACE,IAEIpF,EAFgBoB,qBAAWnB,GAEHM,MAAMP,UAAY,gBAAkB,cAEhE,OACI,yBAAKX,UAAS,cAASW,IACrB,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOqF,OAAK,EAACC,KAAK,KAAlB,IAAuB,kBAAC,EAAD,MAAvB,KACA,kBAAC,IAAD,CAAOA,KAAK,qBAAZ,IAAiC,kBAAC,EAAD,MAAjC,SCRQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,KACA,kBAAC,EAAD,QAGF5B,SAAS6B,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxC,QAAQwC,MAAMA,EAAMC,c","file":"static/js/main.08815f69.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport './Modal.css'\r\n\r\nconst Modal = ({ fields }) => {\r\n\r\n    const [toogle, setToogle] = useState(false)\r\n\r\n    const handleClick = (e) => { setToogle(!toogle) }\r\n\r\n    return (\r\n\r\n\r\n\r\n        <>\r\n            {toogle ?\r\n\r\n                <div className=\"modal\">\r\n                    <button onClick={handleClick}> <span role=\"img\">❌</span> </button>\r\n                    <p> Add new ROW </p>\r\n                    <form>\r\n                        <div>\r\n                            {fields.map((item, index) => {\r\n\r\n                                return (<input type=\"text\" name={item} placeholder={item} />)\r\n\r\n                            })}\r\n\r\n                        </div>\r\n\r\n                        <button className=\"submit-button\" type=\"submit\" > Submit </button>\r\n\r\n                    </form>\r\n\r\n                </div>\r\n\r\n                : <></>}\r\n\r\n\r\n            <div className=\"modal-button\">\r\n                <button onClick={handleClick}> <span role=\"img\"> ✏️</span>  </button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Modal;","// store.js\r\nimport React, {createContext, useReducer} from 'react';\r\n\r\nconst initialState = {\r\n    compact: false,\r\n    nightmode: false\r\n};\r\nconst store = createContext(initialState);\r\nconst { Provider } = store;\r\n\r\nconst StateProvider = ( { children } ) => {\r\n  const [state, dispatch] = useReducer((state, action) => {\r\n    switch(action.type) {\r\n      case 'CHANGE_VIEW_COMPACT':\r\n        return {...state, compact: action.payload};\r\n        case 'CHANGE_VIEW_MODE':\r\n            return {...state, nightmode: action.payload};\r\n      default:\r\n        throw new Error();\r\n    };\r\n  }, initialState);\r\n\r\n  return <Provider value={{ state, dispatch }}>{children}</Provider>;\r\n};\r\n\r\nexport { store, StateProvider }","import React, { useContext } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { store } from '../../store/store'\r\nimport './GridView.css'\r\n\r\n\r\nconst GridView = ({ columns, isLoading, isError, dataSet, isLinked }) => {\r\n\r\n    const globalState = useContext(store);\r\n\r\n    // When compact view is true, the max column widht is the content lenght \r\n    let minWidth = globalState.state.compact ? \"min-content\" : \"100px\"\r\n    let maxWidth = globalState.state.compact ? \"100px\" : \"1fr\"\r\n\r\n    // If the table has an extra column for links we add +1 column\r\n    let numberOfColumns = isLinked ? columns?.length + 1 : columns?.length\r\n    const style = {\r\n        gridTemplateColumns: `repeat(${numberOfColumns}, minmax(${minWidth}, ${maxWidth}))`\r\n    }\r\n\r\n    // When nightmode is true, we add the class nightmode \r\n    let nightmode = globalState.state.nightmode ? \"nightmode\" : \"daymode\"\r\n\r\n    return (\r\n\r\n        <div className={`grid-view`} style={style}>\r\n            {columns?.map((column, index) => {\r\n                // To have \"breakable text\" in header columns, lets replace underscores for spaces\r\n                let name = column.replace(/_/g, \" \")\r\n                return (\r\n                    <>\r\n                        <span className=\"header\" key={index}> {name} </span>\r\n                    </>\r\n                )\r\n            })}\r\n\r\n            {isLinked ? <span className=\"header\"> Link to Entities </span> : null}\r\n\r\n            {isLoading ? \"...loading\" : dataSet.map((data, index) => {\r\n                let objectKey = Object.keys(data)\r\n                return (\r\n                    <>\r\n                        {objectKey.map((property, i) => {\r\n                            return (<span className={`${nightmode}`} key={i} data-id={data?.id} > {data[property]} </span>)\r\n                        })\r\n                        }\r\n                        {isLinked ?\r\n                            <span className={`${nightmode}`}>  <Link className={`${nightmode}`} to={`/entity/${data?.id}`}> Link_To_Entitie {data?.id} </Link></span>\r\n                            : null}\r\n                    </>\r\n                )\r\n\r\n            })}\r\n\r\n            {isError ? \"...There is a problem\" : \"\"}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default GridView;","import React from 'react'\r\nimport useDataApi from 'use-data-api';\r\nimport Modal from '../components/Modal/Modal';\r\nimport GridView from '../components/GridView/GridView';\r\n\r\nfunction Assets() {\r\n    /* Get Api call to assets */\r\n    const [{ data, isLoading, isError }, doFetch] = useDataApi(\r\n        '/api/assets',\r\n        { assets: [] },\r\n    );\r\n\r\n    /* Get the name of columns related to the data */\r\n    const getKeys = () => {\r\n        if (data.assets.length > 0) {\r\n            return Object.keys(data.assets[0])\r\n        }\r\n    }\r\n    const columns = getKeys()\r\n    return (\r\n        <div className=\"grid-content\">\r\n            <div className=\"grid-assets\">\r\n                <GridView\r\n                dataSet = {data.assets}\r\n                isLoading = {isLoading}\r\n                isError = {isError}\r\n                columns = {columns}\r\n                isLinked = {true}\r\n                />\r\n            </div>\r\n            <Modal fields={columns} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Assets;","import { useEffect, useCallback, useState } from \"react\";\r\n\r\nconst useContextMenu = outerRef => {\r\n  const [xPos, setXPos] = useState(\"0px\");\r\n  const [yPos, setYPos] = useState(\"0px\");\r\n  const [menu, showMenu] = useState(false);\r\n  const [dataId, setDataId] = useState(false);\r\n\r\n  const handleContextMenu = useCallback(\r\n    event => {\r\n      event.preventDefault();\r\n      if (outerRef && outerRef?.current?.contains(event.target)) {\r\n        setXPos(`${event.pageX}px`);\r\n        setYPos(`${event.pageY}px`);\r\n        showMenu(true);\r\n        setDataId(event.target.dataset.id)\r\n        console.log(event.target)\r\n      } else {\r\n        showMenu(false);\r\n      }\r\n    },\r\n    [showMenu, outerRef, setXPos, setYPos]\r\n  );\r\n\r\n  const handleClick = useCallback((e) => {\r\n    \r\n    showMenu(false);\r\n\r\n  }, [showMenu]);\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"click\", handleClick);\r\n    document.addEventListener(\"contextmenu\", handleContextMenu);\r\n    return () => {\r\n      document.removeEventListener(\"click\", handleClick);\r\n      document.removeEventListener(\"contextmenu\", handleContextMenu);\r\n    };\r\n  }, []);\r\n\r\n  return { xPos, yPos, menu, dataId };\r\n};\r\n\r\nexport default useContextMenu;","import React from 'react'\r\nimport useContextMenu from '../../Hooks/useContextMenu'\r\nimport './Menu.css'\r\n\r\nconst Menu = ({ outerRef }) => {\r\n    const { xPos, yPos, menu, dataId } = useContextMenu(outerRef);\r\n\r\n    const handleClick = (e) => {\r\n        e.preventDefault()\r\n        console.log(\"Context Menu Test ID:\", dataId)\r\n    }\r\n    if (menu) {\r\n        return (\r\n            <ul className=\"menu\" style={{ top: yPos, left: xPos }}>\r\n                <li onClick={handleClick}> TEST Console ID: {dataId}  </li>\r\n            </ul>\r\n        );\r\n    }\r\n    return <></>;\r\n}\r\n\r\nexport default Menu; ","import React, { useRef } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport useDataApi from 'use-data-api';\r\nimport Modal from '../components/Modal/Modal';\r\nimport GridView from '../components/GridView/GridView';\r\nimport Menu from '../components/Menu/Menu';\r\n\r\n\r\n\r\nfunction Entities() {\r\n\r\n    /* get url browser parameter to filter data */\r\n    let { entityId } = useParams();\r\n    let filteredEntities;\r\n    /* Use Fetch hook to call REST API */\r\n    const [{ data, isLoading, isError }, doFetch] = useDataApi(\r\n        '/api/entities',\r\n        { entities: [] },\r\n    );\r\n\r\n    /* Filter data based on url parameter */\r\n    if (entityId === \"nofilter\") {\r\n        filteredEntities = data.entities\r\n\r\n    } else {\r\n        filteredEntities = data.entities.filter(entitity => entitity.id_asset === parseInt(entityId))\r\n    }\r\n\r\n\r\n    /* get the object keys of the data to construct the header of table*/\r\n    const getKeys = () => {\r\n        if (data.entities.length > 0) {\r\n            return Object.keys(data.entities[0])\r\n        }\r\n    }\r\n    const columns = getKeys()\r\n\r\n    // Get reference for right Click context Menu\r\n    const outerRef = useRef(null);\r\n    return (\r\n        <div className=\"grid-content\">\r\n            <div ref={outerRef}> \r\n            <Menu outerRef={outerRef}/>\r\n                <GridView\r\n                    dataSet={filteredEntities}\r\n                    isLoading={isLoading}\r\n                    isError={isError}\r\n                    columns={columns} />\r\n           \r\n            <Modal fields={columns} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Entities;","import React, {useContext} from 'react'\r\nimport './HeroBanner.css'\r\nimport { Link } from 'react-router-dom'\r\nimport { store } from './../../store/store.js'\r\n\r\nfunction HeroBanner() {\r\n    const globalState = useContext(store);\r\n    const { dispatch } = globalState;\r\n\r\nconsole.log(globalState.state)\r\n    const handleViewClick = (e) => {\r\n        // Dispatch the oposite of the current State\r\n        dispatch({type: \"CHANGE_VIEW_COMPACT\", payload: !globalState.state.compact})\r\n    \r\n    }\r\n\r\n    const handleModeClick = (e) => {\r\n        // Dispatch the oposite of the current State\r\n        dispatch({type: \"CHANGE_VIEW_MODE\", payload: !globalState.state.nightmode})\r\n    }\r\n\r\n    return (\r\n        <div className=\"heroBanner\">\r\n            <div className=\"heroContent\">\r\n                <h1> ExcelSense Technical Test </h1>\r\n                <Link className=\"link\" to=\"/\"> Assets </Link>\r\n                <Link className=\"link\" to=\"/entity/nofilter/\"> Entities </Link>\r\n               \r\n               <button onClick={handleViewClick} className=\"button-view\"> <span> \r\n                    { globalState.state.compact ? \"👁️👁️ \" : \"👀\" }\r\n                    \r\n                    </span>   </button>\r\n                <button onClick= {handleModeClick} className=\"button-mode\" > <span>\r\n                { globalState.state.nightmode ? \"☀️ \" : \"🌙\" }\r\n                     \r\n                     </span> </button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HeroBanner;","import React, {useContext} from 'react';\nimport './App.css';\n\nimport { Switch, Route, BrowserRouter as Router, } from 'react-router-dom'\nimport Assets from './routes/Assets'\nimport Entities from './routes/Entities'\nimport HeroBanner from './components/HeroBanner/HeroBanner'\nimport {store} from './store/store' \n\nfunction App() {\n  const globalState = useContext(store);\n\n  let nightmode = globalState.state.nightmode ? \"App-nightmode\" : \"App-daymode\"\n\n  return (\n      <div className={`App ${nightmode}`}>\n        <Router>\n          <HeroBanner />\n          <Switch>\n            <Route exact path='/'> <Assets /> </Route>\n            <Route path='/entity/:entityId'> <Entities /> </Route>\n          </Switch>\n        </Router>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {StateProvider} from './store/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider> \n    <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}