{"version":3,"sources":["components/AssetsView/AssetsView.js","components/AssetsView/HeaderAssetsView.js","components/Modal/Modal.js","routes/Assets.js","Hooks/useContextMenu.js","components/Menu/Menu.js","components/EntitiesView/EntitiesView.js","routes/Entities.js","components/HeroBanner/HeroBanner.js","App.js","serviceWorker.js","index.js"],"names":["AssetsView","props","className","asset","id","n_number","t_city","t_code","t_street_name","to","HeaderAssetsView","columns","map","column","index","key","Modal","fields","useState","toogle","setToogle","handleClick","e","onClick","role","item","type","name","placeholder","Assets","useDataApi","assets","data","isLoading","isError","length","Object","keys","getKeys","useContextMenu","outerRef","xPos","setXPos","yPos","setYPos","menu","showMenu","dataId","setDataId","handleContextMenu","useCallback","event","preventDefault","current","contains","target","pageX","pageY","dataset","useEffect","document","addEventListener","removeEventListener","Menu","style","top","left","console","log","EntitiesView","filteredEntities","useRef","ref","entities","property","i","data-id","Entities","entityId","useParams","filter","entitity","id_asset","parseInt","HeroBanner","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.842b7347.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './AssetsView.css'\r\n\r\nfunction AssetsView(props) {\r\n    return (\r\n        <div className=\"grid\">\r\n            <span> {props.asset.id} </span>\r\n            <span> {props.asset.n_number} </span>\r\n            <span> {props.asset.t_city} </span>\r\n            <span> {props.asset.t_code} </span>\r\n            <span> {props.asset.t_street_name} </span>\r\n            <span> <Link to={`/entity/${props.asset.id}`}> Link to Entity {props.asset.id} </Link></span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AssetsView;","import React from 'react'\r\n\r\nfunction HeaderAssetsView(props) {\r\n\r\n    return (\r\n        <div className=\"grid\">\r\n            {props.columns ?\r\n                props.columns.map((column, index) => {\r\n                    return (\r\n                        \r\n                    <span className=\"header\" key={index}> {column} </span> \r\n                    \r\n                    )\r\n                }) \r\n                : \" No column\"\r\n            }\r\n            <span className=\"header\"> Link to Entities </span>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default HeaderAssetsView;","import React, { useState } from 'react'\r\nimport './Modal.css'\r\n\r\nconst Modal = ({ fields }) => {\r\n\r\n    const [toogle, setToogle] = useState(false)\r\n\r\n    const handleClick = (e) => { setToogle(!toogle) }\r\n\r\n    return (\r\n\r\n\r\n\r\n        <>\r\n            {toogle ?\r\n\r\n                <div className=\"modal\">\r\n                    <button onClick={handleClick}> <span role=\"img\">❌</span> </button>\r\n                    <p> Add new ROW </p>\r\n                    <form>\r\n                        <div>\r\n                            {fields.map((item, index) => {\r\n\r\n                                return (<input type=\"text\" name={item} placeholder={item} />)\r\n\r\n                            })}\r\n\r\n                        </div>\r\n\r\n                        <button className=\"submit-button\" type=\"submit\" > Submit </button>\r\n\r\n                    </form>\r\n\r\n                </div>\r\n\r\n                : <></>}\r\n\r\n\r\n            <div className=\"modal-button\">\r\n                <button onClick={handleClick}> <span role=\"img\"> ✏️</span>  </button>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Modal;","import React from 'react'\r\nimport useDataApi from 'use-data-api';\r\nimport AssetsView from '../components/AssetsView/AssetsView';\r\nimport HeaderAssetsView from '../components/AssetsView/HeaderAssetsView';\r\nimport Modal from '../components/Modal/Modal';\r\n\r\nfunction Assets() {\r\n    /* Get Api call to assets */ \r\n    const [{ data, isLoading, isError }, doFetch] = useDataApi(\r\n        '/api/assets',\r\n        {assets: []},\r\n    );\r\n\r\n    /* Get the name of columns related to the data */\r\n    const getKeys = () => {\r\n        if (data.assets.length > 0 ) {\r\n            return Object.keys(data.assets[0])\r\n        }\r\n    }\r\n    const columns = getKeys()\r\n    return (\r\n        <>\r\n        <HeaderAssetsView columns={columns}/>\r\n            {isLoading ? \"...loading\" : data.assets.map((asset, index) => {\r\n                return (\r\n                    <AssetsView key={index} asset={asset}/>\r\n                )\r\n            })}\r\n\r\n            {isError ? \"...There is a problem\" : \"\"}\r\n            <Modal fields={columns} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Assets;","import { useEffect, useCallback, useState } from \"react\";\r\n\r\nconst useContextMenu = outerRef => {\r\n  const [xPos, setXPos] = useState(\"0px\");\r\n  const [yPos, setYPos] = useState(\"0px\");\r\n  const [menu, showMenu] = useState(false);\r\n  const [dataId, setDataId] = useState(false);\r\n\r\n  const handleContextMenu = useCallback(\r\n    event => {\r\n      event.preventDefault();\r\n      if (outerRef && outerRef.current.contains(event.target)) {\r\n        setXPos(`${event.pageX}px`);\r\n        setYPos(`${event.pageY}px`);\r\n        showMenu(true);\r\n        setDataId(event.target.dataset.id)\r\n      } else {\r\n        showMenu(false);\r\n      }\r\n    },\r\n    [showMenu, outerRef, setXPos, setYPos]\r\n  );\r\n\r\n  const handleClick = useCallback((e) => {\r\n    \r\n    showMenu(false);\r\n\r\n  }, [showMenu]);\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"click\", handleClick);\r\n    document.addEventListener(\"contextmenu\", handleContextMenu);\r\n    return () => {\r\n      document.removeEventListener(\"click\", handleClick);\r\n      document.removeEventListener(\"contextmenu\", handleContextMenu);\r\n    };\r\n  }, []);\r\n\r\n  return { xPos, yPos, menu, dataId };\r\n};\r\n\r\nexport default useContextMenu;","import React from 'react'\r\nimport useContextMenu from '../../Hooks/useContextMenu'\r\nimport './Menu.css'\r\n\r\nconst Menu = ({ outerRef }) => {\r\n    const { xPos, yPos, menu, dataId } = useContextMenu(outerRef);\r\n\r\n    const handleClick = (e) => {\r\n        e.preventDefault()\r\n        console.log(\"Context Menu Test ID:\", dataId)\r\n    }\r\n    if (menu) {\r\n        return (\r\n            <ul className=\"menu\" style={{ top: yPos, left: xPos }}>\r\n                <li onClick={handleClick}> TEST Console ID: {dataId}  </li>\r\n            </ul>\r\n        );\r\n    }\r\n    return <></>;\r\n}\r\n\r\nexport default Menu; ","import React, { useRef } from 'react'\r\nimport Menu from '../Menu/Menu'\r\nimport './EntitiesView.css'\r\n\r\n\r\nconst EntitiesView = ({ columns, isLoading, isError, filteredEntities }) => {\r\n\r\n    const outerRef = useRef(null);\r\n\r\n    return (\r\n        <div ref={outerRef}>\r\n            <Menu outerRef={outerRef}></Menu>\r\n            <div className=\"entity-grid\">\r\n\r\n                {columns ? columns.map((column, index) => {\r\n                    return (\r\n                        <>\r\n                            <span className=\"header\" key={index}> {column} </span>\r\n                        </>\r\n                    )\r\n                }) : \" \"\r\n\r\n                }\r\n                {isLoading ? \"...loading\" : filteredEntities.map((entities, index) => {\r\n                    let objectKey = Object.keys(entities)\r\n                    return (\r\n\r\n                        objectKey.map((property, i) => {\r\n                            return (<span key={i} data-id={entities.id} > {entities[property]} </span>)\r\n                        })\r\n\r\n\r\n                    )\r\n\r\n                })}\r\n\r\n                {isError ? \"...There is a problem\" : \"\"}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default EntitiesView;\r\n","import React from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport useDataApi from 'use-data-api';\r\nimport EntitiesView from '../components/EntitiesView/EntitiesView';\r\nimport Modal from '../components/Modal/Modal';\r\n\r\n\r\n\r\nfunction Entities() {\r\n    /* get url browser parameter to filter data */\r\n    let { entityId } = useParams();\r\n    let filteredEntities;\r\n    /* Use Fetch hook to call REST API */\r\n    const [{ data, isLoading, isError }, doFetch] = useDataApi(\r\n        '/api/entities',\r\n        { entities: [] },\r\n    );\r\n    \r\n    /* Filter data based on url parameter */\r\n    if (entityId === \"nofilter\") {\r\n        filteredEntities = data.entities\r\n\r\n    } else {\r\n        filteredEntities = data.entities.filter(entitity => entitity.id_asset === parseInt(entityId))\r\n    }\r\n\r\n\r\n    /* get the object keys of the data to construct the header of table*/\r\n    const getKeys = () => {\r\n        if (data.entities.length > 0) {\r\n            return Object.keys(data.entities[0])\r\n        }\r\n    }\r\n    const columns = getKeys()\r\n\r\n\r\n    return (\r\n        <>\r\n            {isLoading ? \"...Loading\" :\r\n                <EntitiesView\r\n                    filteredEntities={filteredEntities}\r\n                    isLoading={isLoading}\r\n                    isError={isError}\r\n                    columns={columns} />\r\n\r\n            }\r\n            <Modal fields={columns} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Entities;","import React from 'react'\r\nimport './HeroBanner.css'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction HeroBanner() {\r\n    return (\r\n        <div className=\"herobanner\">\r\n            <h1> ExcelSense Technical Test </h1>\r\n            <Link className=\"link\" to=\"/\"> Assets </Link>\r\n            <Link className=\"link\" to=\"/entity/nofilter/\"> Entities </Link>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HeroBanner;","import React from 'react';\nimport './App.css';\n\nimport { Switch, Route, BrowserRouter as Router, } from 'react-router-dom'\nimport Assets from './routes/Assets'\nimport Entities from './routes/Entities'\nimport HeroBanner from './components/HeroBanner/HeroBanner'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">    \n      <Router>\n      <HeroBanner />\n        <Switch>\n          <Route exact path='/'> <Assets /> </Route>\n          <Route path='/entity/:entityId'> <Entities /> </Route>\n        </Switch>\n      </Router>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}